Index: app/src/main/java/com/example/elshare/map_frag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.elshare;\n\nimport android.app.Activity;\nimport android.app.AlertDialog;\nimport android.app.Dialog;\nimport android.app.ProgressDialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.SharedPreferences;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.PorterDuff;\nimport android.graphics.Typeface;\nimport android.graphics.drawable.ColorDrawable;\nimport android.graphics.drawable.Drawable;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.preference.PreferenceManager;\nimport android.text.SpannableString;\nimport android.util.DisplayMetrics;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.AutoCompleteTextView;\nimport android.widget.Button;\nimport android.widget.CheckBox;\nimport android.widget.CompoundButton;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.LinearLayout;\nimport android.widget.ListView;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.DrawableRes;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;\nimport androidx.core.content.ContextCompat;\nimport androidx.fragment.app.Fragment;\nimport androidx.recyclerview.widget.GridLayoutManager;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.example.elshare.adapter.ChargerTypeAdapter;\nimport com.example.elshare.adapter.GooglePlacesAutocompleteAdapter;\nimport com.example.elshare.adapter.SocketTypeAdapter;\nimport com.example.elshare.utils.SingletonRetrofit;\nimport com.google.android.gms.maps.CameraUpdateFactory;\nimport com.google.android.gms.maps.GoogleMap;\nimport com.google.android.gms.maps.OnMapReadyCallback;\nimport com.google.android.gms.maps.SupportMapFragment;\nimport com.google.android.gms.maps.model.BitmapDescriptor;\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\nimport com.google.android.gms.maps.model.LatLng;\nimport com.google.android.gms.maps.model.Marker;\nimport com.google.android.gms.maps.model.MarkerOptions;\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport com.google.maps.android.clustering.ClusterManager;\nimport com.mohammedalaa.seekbar.DoubleValueSeekBarView;\nimport com.mohammedalaa.seekbar.OnDoubleValueSeekBarChangeListener;\nimport com.mohammedalaa.seekbar.OnRangeSeekBarChangeListener;\nimport com.mohammedalaa.seekbar.RangeSeekBarView;\nimport com.yahoo.mobile.client.android.util.rangeseekbar.RangeSeekBar;\n\nimport java.io.StringWriter;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\nimport datamodel.APIInterface;\nimport datamodel.Connector_type;\nimport datamodel.MarkerData;\nimport datamodel.ShowAvailabilityPojo;\nimport datamodel.ShowAvailabilityProvider;\nimport datamodel.Socket;\nimport datamodel.Socket_public;\nimport de.hdodenhof.circleimageview.CircleImageView;\nimport okhttp3.MediaType;\nimport okhttp3.RequestBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\npublic class map_frag extends Fragment implements OnMapReadyCallback, AdapterView.OnItemClickListener\n{\n    ImageButton mapFilter;\n    private GoogleMap mMap;\n    Dialog pw;\n    ListView lv_languages;\n    BottomSheetDialog bottomSheetDialog;\n    ArrayAdapter list_adapter;\n    Dialog myDialog;\n    DoubleValueSeekBarView  rangeSeekBar;\n    GooglePlacesAutocompleteAdapter mGooglePlacesAutocompleteAdapter;\n    AutoCompleteTextView mAddressAutoCompleteTextView;\n    private Button apply_p,reset_b,price,avail,rate,rate_a,rate_r,avail_a,avail_r,price_a,price_r,show_list;\n     Boolean priceVisible;\n    Dialog viewDetailDialog;\n\n\n    RangeSeekBar seekBar;\n    RequestBody priceStartBody;\n    RequestBody priceEndBody;\n    RequestBody placeNameBody;\n    RequestBody socketDataBody;\n    RequestBody timeSlotBody;\n    RequestBody availableDayBody;\n    RequestBody chargerBody;\n\n    TextView chargerTypeText;\n    TextView socketTypeText;\n    TextView connetorText;\n    TextView priceText;\n    private List<MarkerData> markerData;\n    private MarkerData markerList;\n    private List<Connector_type> connetor_set;\n    private Connector_type my_connector;\n    private List<Socket> socket_set;\n    private Socket socketArray;\n\n    public int i;\n    SharedPreferences.Editor editor;\n    final ArrayList<String> chargerType = new ArrayList<>();\n    final ArrayList<String> socketType = new ArrayList<>();\n    ArrayList<String> selectedSocket = new ArrayList<>();\n    ArrayList<String> selectedCharger = new ArrayList<>();\n    ArrayList<String> availabilityDays = new ArrayList<>();\n    ArrayList<String> timeSlotArray = new ArrayList<>();\n    private ArrayList<CheckBox> checkBoxArrayList = new ArrayList<>();\n\n    View mapMarkerView ;\n\n\n    SocketTypeAdapter socketTypeAdapter;\n    ChargerTypeAdapter chargerTypeAdapter;\n    SupportMapFragment mapFragment;\n\n    CheckBox monday;\n    CheckBox tuesday;\n    CheckBox wednesday;\n    CheckBox thursday;\n    CheckBox friday;\n    CheckBox satursday;\n    CheckBox sunday;\n    CheckBox morningTime;\n    CheckBox middayTime;\n    CheckBox afternoonTime;\n    CheckBox eveningTime;\n    CheckBox  nightTime;\n\n     String chargerString ;\n     String connectorTypeString;\n     String priceRateString;\n     String list_id;\n     SharedPreferences preferences;\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        final View rootView = inflater.inflate(R.layout.map_frag, container, false);\n        preferences = PreferenceManager.getDefaultSharedPreferences(getContext());\n\n        mapFilter = rootView.findViewById(R.id.imageButton35);\n        myDialog = new Dialog(getContext());\n        mAddressAutoCompleteTextView=rootView.findViewById(R.id.autoCompleteTextViewMap);\n        mGooglePlacesAutocompleteAdapter = new GooglePlacesAutocompleteAdapter(getContext(), R.layout.support_simple_spinner_dropdown_item);\n        mAddressAutoCompleteTextView.setAdapter(mGooglePlacesAutocompleteAdapter);\n        mAddressAutoCompleteTextView.setOnItemClickListener(this);\n         seekBar = new RangeSeekBar<Integer>(getContext());\n         viewDetailDialog=new Dialog(getContext());\n\n        show_list=rootView.findViewById(R.id.button123);\n        show_list.setOnClickListener(new View.OnClickListener() {\n            @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n            @Override\n            public void onClick(View v) {\n\n            }\n        });\n\n        mapFragment= (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);\n        initialMarkers();\n\n\n\n        mapFilter.setOnClickListener(new View.OnClickListener() {\n            @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n            @Override\n            public void onClick(View v) {\n\n                socketType.clear();\n                chargerType.clear();\n                final RecyclerView chargerTypeRecycleView;\n                final RecyclerView socketTypeRecycleView;\n                final TextView minText;\n                final TextView maxText;\n                Button mapFilterSortByPrice;\n                final LinearLayout priceLayout;\n\n                pw=new Dialog(v.getRootView().getContext(), R.style.PauseDialog);\n                pw.getWindow().setBackgroundDrawable(new ColorDrawable(Color.WHITE));\n                pw.setTitle(\"Map Filter\");\n                pw.setContentView(R.layout.filter_window);\n                minText=pw.findViewById(R.id.filterMinRange);\n                maxText=pw.findViewById(R.id.filterMaxRange);\n                priceLayout=pw.findViewById(R.id.pricesortLayout);\n                priceLayout.setVisibility(View.GONE);\n                priceVisible=true;\n                mapFilterSortByPrice=pw.findViewById(R.id.mapFilterSortByPrice);\n                mapFilterSortByPrice.setOnClickListener(new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        if (priceVisible)\n                        {\n                            priceLayout.setVisibility(View.VISIBLE);\n                            priceVisible=false;\n                        }\n                        else\n                        {\n                            priceLayout.setVisibility(View.GONE);\n                            priceVisible=true;\n\n                        }\n\n                    }\n                });\n\n                 rangeSeekBar=pw.findViewById(R.id.double_range_seekbar);\n                rangeSeekBar.setOnRangeSeekBarViewChangeListener(new OnDoubleValueSeekBarChangeListener() {\n                    @Override\n                    public void onValueChanged(@Nullable DoubleValueSeekBarView seekBar, int min, int max, boolean fromUser) {\n\n                        Log.i(\"Min:\", String.valueOf(min));\n                        Log.i(\"Max:\", String.valueOf(max));\n                        minText.setText(String.valueOf(min));\n                        maxText.setText(String.valueOf(max));\n\n                    }\n\n                    @Override\n                    public void onStartTrackingTouch(@Nullable DoubleValueSeekBarView seekBar, int min, int max) {\n\n                    }\n\n                    @Override\n                    public void onStopTrackingTouch(@Nullable DoubleValueSeekBarView seekBar, int min, int max) {\n\n                    }\n                });\n                if (priceVisible) {\n                    priceStartBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), minText.getText().toString());\n                    priceEndBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), maxText.getText().toString());\n                }\n\n                monday=pw.findViewById(R.id.mapFilterMonday);\n                tuesday=pw.findViewById(R.id.mapFilterTuesday);\n                wednesday=pw.findViewById(R.id.mapFilterWednesday);\n                thursday=pw.findViewById(R.id.mapFilterThursday);\n                friday=pw.findViewById(R.id.mapFilterFriday);\n                satursday=pw.findViewById(R.id.mapFilterSatursday);\n                sunday=pw.findViewById(R.id.mapFilterSunday);\n                morningTime=pw.findViewById(R.id.mapFilterTimeMorning);\n                afternoonTime=pw.findViewById(R.id.mapFilterTimeAfternoon);\n                middayTime=pw.findViewById(R.id.mapFilterTimeMidDay);\n                eveningTime=pw.findViewById(R.id.mapFilterTimeEvening);\n                nightTime=pw.findViewById(R.id.mapFilterTimeOverNight);\n                mainatinStateOfCheckboxes(v);\n                monday.setChecked(preferences.getBoolean(\"monday\", false));\n                tuesday.setChecked(preferences.getBoolean(\"tuesday\", false));\n                wednesday.setChecked(preferences.getBoolean(\"wednesday\", false));\n                thursday.setChecked(preferences.getBoolean(\"thursday\", false));\n                friday.setChecked(preferences.getBoolean(\"friday\", false));\n                satursday.setChecked(preferences.getBoolean(\"satursday\", false));\n                sunday.setChecked(preferences.getBoolean(\"sunday\", false));\n\n                morningTime.setChecked(preferences.getBoolean(\"morning\", false));\n                middayTime.setChecked(preferences.getBoolean(\"midday\", false));\n                afternoonTime.setChecked(preferences.getBoolean(\"afternoon\", false));\n                eveningTime.setChecked(preferences.getBoolean(\"evening\", false));\n                nightTime.setChecked(preferences.getBoolean(\"overnight\", false));\n\n                monday.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                tuesday.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                wednesday.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                thursday.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                friday.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                satursday.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                sunday.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                morningTime.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                middayTime.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                afternoonTime.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                eveningTime.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n                nightTime.setOnCheckedChangeListener(new mSingleCheckBoxChangeListener());\n\n                chargerTypeRecycleView =pw.findViewById(R.id.mapFilterChargerType);\n                socketTypeRecycleView =pw.findViewById(R.id.mapFilterSocketType);\n\n\n                APIInterface service = SingletonRetrofit.getAPIInterface();\n                Call<List<Connector_type>> call = service.getConnectorMapFilter();\n                Log.i(\"Connector_api  : \", String.valueOf(call.request().url()));\n                call.enqueue(new Callback<List<Connector_type>>() {\n                    @Override\n                    public void onResponse(Call<List<Connector_type>> call, Response<List<Connector_type>> response) {\n                        if (response.body() != null) {\n                            Log.i(\"login response: \", String.valueOf(response.body()));\n                            connetor_set = response.body();\n                            if (connetor_set != null) {\n                                ArrayList make_array = (ArrayList) response.body();\n                                String demo_str = null;\n                                int i;\n                                for (i = 0; i < make_array.size(); i++) {\n                                    my_connector = connetor_set.get(i);\n                                    demo_str = my_connector.getConnectorType();\n                                    chargerType.add(demo_str);\n                                }\n                                chargerTypeRecycleView.setHasFixedSize(true);\n                                GridLayoutManager manager = new GridLayoutManager(getContext(), 2);\n                                chargerTypeRecycleView.setLayoutManager(manager);\n                                chargerTypeAdapter = new ChargerTypeAdapter(getContext(), chargerType);\n                                chargerTypeRecycleView.setAdapter(chargerTypeAdapter);\n                            }\n                        }\n                        else {\n\n                        }\n                    }\n\n                    @Override\n                    public void onFailure(Call<List<Connector_type>> call, Throwable t) {\n                        Log.i(\"login error: \", String.valueOf(t));\n                    }\n                });\n\n                Call<List<Socket>> call_socket = service.getSocketMapFilter();\n                call_socket.enqueue(new Callback<List<Socket>>() {\n                    @Override\n                    public void onResponse(Call<List<Socket>> call_socket, Response<List<Socket>> response) {\n                        if (response.body() != null) {\n                            Log.i(\"login response: \", String.valueOf(response.body()));\n                            socket_set = response.body();\n                            if (socket_set != null) {\n                                ArrayList make_array = (ArrayList) response.body();\n                                String demo_str = null;\n                                int i;\n                                for (i = 0; i < make_array.size(); i++) {\n                                    socketArray = socket_set.get(i);\n                                    demo_str = socketArray.getSocket();\n                                    socketType.add(demo_str);\n                                }\n                                socketTypeRecycleView.setHasFixedSize(true);\n                                GridLayoutManager manager = new GridLayoutManager(getContext(), 2);\n                                socketTypeRecycleView.setLayoutManager(manager);\n                                socketTypeAdapter = new SocketTypeAdapter(getContext(), socketType);\n                                socketTypeRecycleView.setAdapter(socketTypeAdapter);\n                            }\n                        }\n                        else {\n                        }\n                    }\n\n                    @Override\n                    public void onFailure(Call<List<Socket>> call_socket, Throwable t) {\n                        Log.i(\"login error: \", String.valueOf(t));\n                    }\n                });\n\n                pw.show();\n                reset_b=pw.findViewById(R.id.mapFilterReset);\n                final LinearLayout timeSlotLayout=pw.findViewById(R.id.timeSlotLayout);\n                final LinearLayout availabilityLayout=pw.findViewById(R.id.availabilityLayout);\n                reset_b.setOnClickListener(new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        availableDayBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"\");\n                        timeSlotBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"\");\n                        chargerBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"\");\n                        socketDataBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), \"\");\n                        for(int i=0; i<timeSlotLayout.getChildCount();i++){\n                            v = timeSlotLayout.getChildAt(i);\n                            if(v instanceof CheckBox ){\n                                ((CheckBox) v).setChecked(false);\n                            }\n                        }\n                        for (int i=0;i<availabilityLayout.getChildCount();i++)\n                        {\n                            v=availabilityLayout.getChildAt(i);\n                            {\n                                if (v instanceof  CheckBox)\n                                {\n                                    ((CheckBox) v).setChecked(false);\n\n                                }\n                            }\n                        }\n                        editor=preferences.edit();\n                        editor.remove(\"SOCKET_SET\");\n                        editor.remove(\"CHARGER_SET\");\n                        editor.apply();\n                        pw.dismiss();\n                        defaultMarker();\n                    }\n                });\n                apply_p=pw.findViewById(R.id.mapFilterApply);\n                apply_p.setOnClickListener(new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        pw.dismiss();\n\n                        Gson gson = new Gson();\n                        String charger_str = preferences.getString(\"CHARGER_SET\", \"null\");\n                        if (charger_str.isEmpty()) { } else {\n                            Type type = new TypeToken<List<String>>() {\n                            }.getType();\n                            selectedCharger = gson.fromJson(charger_str, type);\n                            Log.i(\"Selected charger:\", String.valueOf(selectedCharger));\n                        }\n\n                        String socket_str = preferences.getString(\"SOCKET_SET\", \"null\");\n                        if (socket_str.isEmpty()) { } else {\n                            Type type = new TypeToken<List<String>>() {\n                            }.getType();\n                            selectedSocket = gson.fromJson(socket_str, type);\n                            Log.i(\"Selected charger:\", String.valueOf(selectedSocket));\n                        }\n                        availableDayBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), availabilityDays.toString());\n                        timeSlotBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), timeSlotArray.toString());\n                        Log.i(\"Selected Time:\", String.valueOf(timeSlotArray));\n\n\n                        if (selectedSocket!=null && selectedCharger!=null) {\n                            chargerBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), charger_str);\n                            socketDataBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), socket_str);\n                            Log.i(\"Available Day:\", String.valueOf(availabilityDays));\n                            defaultMarker();\n                        }\n\n                        else if (selectedSocket!=null && selectedCharger==null && selectedCharger.isEmpty())\n                        {\n                            socketDataBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), socket_str);\n                            defaultMarker();\n                        }\n\n                    }\n                });\n\n            }\n        });\n\n        return rootView;\n    }\n\n    private void mainatinStateOfCheckboxes(View v) {\n    }\n\n    private void defaultMarker()\n    {\n        final ProgressDialog mProgressDialog = new ProgressDialog(getContext());\n        mProgressDialog.setIndeterminate(true);\n        mProgressDialog.setMessage(\"Loading...\");\n        mProgressDialog.show();\n        mapFragment.getMapAsync(new OnMapReadyCallback() {\n            @Override\n            public void onMapReady(final GoogleMap mMap) {\n                mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);\n\n                mMap.clear();\n\n                final ArrayList<Double> latArray=new ArrayList<>();\n                final ArrayList<Double> longArray=new ArrayList<>();\n\n                final ArrayList<String> chrgerTypeArray=new ArrayList<>();\n                final ArrayList<String> connectorTypeArray=new ArrayList<>();\n                final ArrayList<String> rateFinalPriceArray=new ArrayList<>();\n                final ArrayList<String> listingId=new ArrayList<>();\n                final ArrayList<String> hostArray=new ArrayList<>();\n\n\n                placeNameBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), mAddressAutoCompleteTextView.getText().toString());\n\n                APIInterface service = SingletonRetrofit.getAPIInterface();\n                Call<List<MarkerData>> call = service.getMarkerData(priceStartBody,priceEndBody,placeNameBody,socketDataBody,timeSlotBody,availableDayBody,chargerBody);\n                call.enqueue(new Callback<List<MarkerData>>() {\n                    @Override\n                    public void onResponse(Call<List<MarkerData>> call, Response<List<MarkerData>> response) {\n                        if (response.body() != null) {\n                            markerData=response.body();\n                            if (markerData!=null) {\n                                ArrayList markerArray = (ArrayList) response.body();\n\n                                for (i = 0; i < markerArray.size(); i++) {\n                                    markerList = markerData.get(i);\n\n                                    Double lat = markerList.getLatitude();\n                                    Double lng = markerList.getLongitude();\n                                    latArray.add(lat);\n                                    longArray.add(lng);\n                                    chrgerTypeArray.add(markerList.getBrand());\n                                    connectorTypeArray.add(markerList.getConnectorType());\n                                    rateFinalPriceArray.add(markerList.getFinalPrice());\n                                    listingId.add(String.valueOf(markerList.getId()));\n                                    list_id=String.valueOf(markerList.getId());\n                                    hostArray.add(markerList.getTable());\n                                }\n                                for (i = 0; i < latArray.size(); i++) {\n                                    if (latArray.get(i)!=null) {\n                                        if (chrgerTypeArray.get(i) != null) {\n                                            chargerString = chrgerTypeArray.get(i);\n                                            connectorTypeString = connectorTypeArray.get(i);\n                                            priceRateString = rateFinalPriceArray.get(i);\n                                            list_id = listingId.get(i);\n                                            Log.i(\"Brand:\", chargerString);\n                                            Log.i(\"Listing Id:\", listingId.get(i));\n\n                                            Log.i(\"Lattitude:\", String.valueOf(latArray.get(i)));\n                                            Log.i(\"Longitude:\", String.valueOf(longArray.get(i)));\n\n                                            LatLng latLngPosition = new LatLng(latArray.get(i), longArray.get(i)); ///\n                                            Log.i(\"Lat Lng:\", String.valueOf(latLngPosition));\n                                            mMap.addMarker(new MarkerOptions().position(latLngPosition).title(list_id).snippet(hostArray.get(i)).icon(bitmapDescriptorFromVector(getContext(),R.drawable.pin_marker)));\n                                            mMap.moveCamera(CameraUpdateFactory.newLatLng(latLngPosition));\n                                            mMap.getUiSettings().setZoomControlsEnabled(true);\n                                            mMap.animateCamera(CameraUpdateFactory.zoomOut(), 10, null);\n\n                                            mMap.setOnInfoWindowClickListener(new GoogleMap.OnInfoWindowClickListener() {\n                                                @Override\n                                                public void onInfoWindowClick(Marker marker) {\n                                                    showAlertDialog(marker.getTitle());\n                                                }\n                                            });\n\n                                            mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\n                                                @Override\n                                                public boolean onMarkerClick(Marker marker) {\n\n                                                    mMap.setInfoWindowAdapter(new GoogleMap.InfoWindowAdapter() {\n                                                        @Override\n                                                        public View getInfoWindow(Marker arg0) {\n                                                            return null;\n                                                        }\n\n                                                        @Override\n                                                        public View getInfoContents(Marker arg0) {\n                                                            Log.i(\"ID:\", String.valueOf(arg0.getTitle()));\n                                                            Log.i(\"HOST:\",arg0.getSnippet());\n                                                            String hostStr=arg0.getSnippet();\n                                                            hostStr=trimSingleQuote(hostStr);\n\n                                                            try {\n                                                                APIInterface service = SingletonRetrofit.getAPIInterface();\n                                                                Call<ShowAvailabilityPojo> call = service.getAvailability(arg0.getTitle(),hostStr);\n                                                                Log.i(\"Connector_api  : \", String.valueOf(call.request().url()));\n                                                                call.enqueue(new Callback<ShowAvailabilityPojo>() {\n                                                                    @Override\n                                                                    public void onResponse(Call<ShowAvailabilityPojo> call, Response<ShowAvailabilityPojo> response) {\n                                                                        if (response.body() != null) {\n                                                                            ShowAvailabilityPojo avaiPojo=response.body();\n                                                                            if (avaiPojo!=null)\n                                                                            {\n                                                                                ShowAvailabilityProvider providerObject=avaiPojo.getProvider();\n                                                                                if (providerObject!=null)\n                                                                                {\n                                                                                    mapMarkerView = getLayoutInflater().inflate(R.layout.text_auto, null);\n\n                                                                                    connetorText =(TextView) mapMarkerView.findViewById(R.id.type_type);\n                                                                                    priceText = mapMarkerView.findViewById(R.id.rate_type);\n                                                                                    chargerTypeText = mapMarkerView.findViewById(R.id.charger_type);\n                                                                                    chargerTypeText.bringToFront();\n\n                                                                                    if (providerObject.getConnectorType()!=null) {\n                                                                                        connetorText.setText(providerObject.getConnectorType());\n                                                                                    }\n                                                                                    else {\n                                                                                        connetorText.setText(\"null\");\n                                                                                    }\n                                                                                    priceText.setText(providerObject.getFinalPrice());\n                                                                                    if (providerObject.getChargerBrand()!=null)\n                                                                                    {\n                                                                                        StringWriter sw = new StringWriter();\n                                                                                        sw.append(\"Charger Brand:\");\n                                                                                        sw.append(providerObject.getChargerBrand());\n                                                                                        chargerTypeText.setText(sw.toString());\n                                                                                    }\n                                                                                    else\n                                                                                    {\n                                                                                        StringWriter sw = new StringWriter();\n                                                                                        sw.append(\"Socket:\");\n                                                                                        sw.append(providerObject.getChargerBrand());\n                                                                                        chargerTypeText.setText(sw.toString());\n                                                                                    }\n                                                                                    Log.i(\"Data:\",(connetorText.getText().toString()));\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n\n                                                                    @Override\n                                                                    public void onFailure(Call<ShowAvailabilityPojo> call, Throwable t) {\n\n                                                                    }\n                                                                });\n\n\n                                                            } catch (Exception ev) {\n                                                                System.out.print(ev.getMessage());\n                                                            }\n                                                            return mapMarkerView;\n                                                        }\n                                                    });\n                                                    return false;\n                                                }\n                                            });\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                Toast.makeText(getContext(), \"No Listing available.\", Toast.LENGTH_SHORT).show();\n                            }\n                        }\n                        mProgressDialog.dismiss();\n                    }\n\n                    @Override\n                    public void onFailure(Call<List<MarkerData>> call, Throwable t) {\n                        Log.i(\"Map error: \", String.valueOf(t));\n                        Toast.makeText(getContext(), \"Please check network.\", Toast.LENGTH_SHORT).show();\n                    }\n                });\n\n            }\n        });\n    }\n\n\n    public View getInfoContents(Marker marker) {\n        View view = getLayoutInflater().inflate(R.layout.text_auto, null);\n\n        TextView titleTextView = (TextView) view.findViewById(R.id.type_type);\n        TextView snippetTextView = (TextView) view.findViewById(R.id.rate_type);\n\n        titleTextView.setText(marker.getTitle());\n        snippetTextView.setText(marker.getSnippet());\n\n        return view;\n    }\n\n    private void initialMarkers()\n    {\n        final ProgressDialog mProgressDialog = new ProgressDialog(getContext());\n        mProgressDialog.setIndeterminate(true);\n        mProgressDialog.setMessage(\"Loading...\");\n        mProgressDialog.show();\n        mapFragment.getMapAsync(new OnMapReadyCallback() {\n            @Override\n            public void onMapReady(final GoogleMap mMap) {\n                mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);\n\n                mMap.clear();\n\n                final ArrayList<Double> latArray=new ArrayList<>();\n                final ArrayList<Double> longArray=new ArrayList<>();\n\n                final ArrayList<String> chrgerTypeArray=new ArrayList<>();\n                final ArrayList<String> connectorTypeArray=new ArrayList<>();\n                final ArrayList<String> rateFinalPriceArray=new ArrayList<>();\n                final ArrayList<String> listingId=new ArrayList<>();\n                final ArrayList<String> hostArray=new ArrayList<>();\n\n                placeNameBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), mAddressAutoCompleteTextView.getText().toString());\n\n                APIInterface service = SingletonRetrofit.getAPIInterface();\n                Call<List<MarkerData>> call = service.getMarkerData(priceStartBody,priceEndBody,placeNameBody,socketDataBody,timeSlotBody,availableDayBody,chargerBody);\n                call.enqueue(new Callback<List<MarkerData>>() {\n                    @Override\n                    public void onResponse(Call<List<MarkerData>> call, Response<List<MarkerData>> response) {\n                        if (response.body() != null) {\n                            markerData=response.body();\n                            if (markerData!=null) {\n                                ArrayList markerArray = (ArrayList) response.body();\n\n                                for (i = 0; i < markerArray.size(); i++) {\n                                    markerList = markerData.get(i);\n                                    Double lat = markerList.getLatitude();\n                                    Double lng = markerList.getLongitude();\n                                    latArray.add(lat);\n                                    longArray.add(lng);\n                                    chrgerTypeArray.add(markerList.getBrand());\n                                    connectorTypeArray.add(markerList.getConnectorType());\n                                    rateFinalPriceArray.add(markerList.getFinalPrice());\n                                    listingId.add(String.valueOf(markerList.getId()));\n                                    hostArray.add(markerList.getTable());\n                                }\n                                for (i = 0; i < latArray.size(); i++) {\n                                    chargerString = chrgerTypeArray.get(i);\n                                    connectorTypeString=connectorTypeArray.get(i);\n                                    priceRateString=rateFinalPriceArray.get(i);\n                                    list_id=listingId.get(i);\n                                    Log.i(\"Brand:\",chargerString);\n                                    Log.i(\"Listing Id:\",listingId.get(i));\n                                        Log.i(\"Lattitude:\", String.valueOf(latArray.get(i)));\n                                        Log.i(\"Longitude:\", String.valueOf(longArray.get(i)));\n\n\n                                        LatLng latLngPosition = new LatLng(latArray.get(i), longArray.get(i)); ///\n                                        Log.i(\"Lat Lng:\", String.valueOf(latLngPosition));\n//                                    mMap.addMarker(new MarkerOptions().position(latLngPosition));\n                                        mMap.addMarker(new MarkerOptions().position(latLngPosition).title(list_id).snippet(hostArray.get(i)).icon(bitmapDescriptorFromVector(getContext(),R.drawable.pin_marker)));\n                                        mMap.moveCamera(CameraUpdateFactory.newLatLng(latLngPosition));\n                                        mMap.getUiSettings().setZoomControlsEnabled(true);\n                                        mMap.animateCamera(CameraUpdateFactory.zoomOut(), 10, null);\n\n                                        mMap.setOnInfoWindowClickListener(new GoogleMap.OnInfoWindowClickListener() {\n                                            @Override\n                                            public void onInfoWindowClick(Marker marker) {\n                                                showAlertDialog(marker.getTitle());\n                                            }\n                                        });\n\n                                        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\n                                            @Override\n                                            public boolean onMarkerClick(final Marker marker) {\n\n                                                mMap.setInfoWindowAdapter(new GoogleMap.InfoWindowAdapter() {\n                                                    @Override\n                                                    public View getInfoWindow(Marker arg0) {\n                                                        return null;\n                                                    }\n\n                                                    @Override\n                                                    public View getInfoContents(Marker arg0) {\n                                                        Log.i(\"ID:\", String.valueOf(arg0.getTitle()));\n                                                        Log.i(\"HOST:\",arg0.getSnippet());\n                                                        String hostStr=arg0.getSnippet();\n                                                        hostStr=trimSingleQuote(hostStr);\n                                                        try {\n                                                            APIInterface service = SingletonRetrofit.getAPIInterface();\n                                                            Call<ShowAvailabilityPojo> call = service.getAvailability(arg0.getTitle(),hostStr);\n                                                            Log.i(\"Connector_api  : \", String.valueOf(call.request().url()));\n                                                            call.enqueue(new Callback<ShowAvailabilityPojo>() {\n                                                                @Override\n                                                                public void onResponse(Call<ShowAvailabilityPojo> call, Response<ShowAvailabilityPojo> response) {\n                                                                    if (response.body() != null) {\n                                                                        ShowAvailabilityPojo avaiPojo=response.body();\n                                                                        if (avaiPojo!=null)\n                                                                        {\n                                                                            ShowAvailabilityProvider providerObject=avaiPojo.getProvider();\n                                                                            if (providerObject!=null)\n                                                                            {\n                                                                                mapMarkerView = getLayoutInflater().inflate(R.layout.text_auto, null);\n\n                                                                                connetorText =(TextView) mapMarkerView.findViewById(R.id.type_type);\n                                                                                priceText = mapMarkerView.findViewById(R.id.rate_type);\n                                                                                chargerTypeText = mapMarkerView.findViewById(R.id.charger_type);\n                                                                                chargerTypeText.bringToFront();\n                                                                                connetorText.setText(marker.getTitle());\n\n                                                                                if (providerObject.getConnectorType()!=null) {\n                                                                                    connetorText.setText(providerObject.getConnectorType());\n                                                                                }\n                                                                                else {\n                                                                                    connetorText.setText(\"null\");\n                                                                                }\n                                                                                priceText.setText(providerObject.getFinalPrice());\n                                                                                if (providerObject.getChargerBrand()!=null)\n                                                                                {\n\n                                                                                    StringWriter sw = new StringWriter();\n                                                                                    sw.append(\"Charger Brand:\");\n                                                                                    sw.append(providerObject.getChargerBrand());\n                                                                                    chargerTypeText.setText(sw.toString());\n                                                                                }\n                                                                                else\n                                                                                {\n                                                                                    StringWriter sw = new StringWriter();\n                                                                                    sw.append(\"Socket:\");\n                                                                                    sw.append(providerObject.getChargerBrand());\n                                                                                    chargerTypeText.setText(sw.toString());\n                                                                                }\n                                                                                Log.i(\"Data:\",(connetorText.getText().toString()));\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n\n                                                                @Override\n                                                                public void onFailure(Call<ShowAvailabilityPojo> call, Throwable t) {\n\n                                                                }\n                                                            });\n\n\n                                                        } catch (Exception ev) {\n                                                            System.out.print(ev.getMessage());\n                                                        }\n                                                        return mapMarkerView;\n                                                    }\n                                                });\n                                                return false;\n                                            }\n                                        });\n\n                                }\n                            }\n                            else {\n                                Toast.makeText(getContext(), \"No Listing available.\", Toast.LENGTH_SHORT).show();\n                            }\n                        }\n\n                        mProgressDialog.dismiss();\n                    }\n\n                    @Override\n                    public void onFailure(Call<List<MarkerData>> call, Throwable t) {\n                        Log.i(\"Map error: \", String.valueOf(t));\n                        Toast.makeText(getContext(), \"Please check network.\", Toast.LENGTH_SHORT).show();\n                    }\n                });\n\n            }\n        });\n    }\n    private void showAlertDialog(String i)\n    {\n\n        viewDetailDialog=new Dialog(getActivity(),R.style.PauseDialog);\n        myDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.WHITE));\n        viewDetailDialog.setTitle(\"Map Detail\");\n        viewDetailDialog.setContentView(R.layout.pricing_reservation_pop_up);\n        viewDetailDialog.show();\n\n\n\n    }\n\n\n    private BitmapDescriptor bitmapDescriptorFromVector(Context context, int vectorResId) {\n        Drawable vectorDrawable = ContextCompat.getDrawable(context, vectorResId);\n        vectorDrawable.setBounds(0, 0, vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight());\n        Bitmap bitmap = Bitmap.createBitmap(vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\n        Canvas canvas = new Canvas(bitmap);\n        vectorDrawable.draw(canvas);\n        return BitmapDescriptorFactory.fromBitmap(bitmap);\n    }\n\n\n    private void showAvailbilityPopUp() {\n        AlertDialog.Builder builder1 = new AlertDialog.Builder(getContext());\n        builder1.setMessage(\"Commercial Details \\n\\n Availability\");\n        builder1.setCancelable(true);\n        builder1.setPositiveButton(\"close\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int id) {\n                dialog.cancel();\n            }\n        });\n        AlertDialog alertDialog = builder1.create();\n        alertDialog.show();\n    }\n\n    @Override\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n        String place_name = mGooglePlacesAutocompleteAdapter.getItem(position);\n        place_name=trimDoubbleQuote(place_name);\n        Log.i(\"Place is:\",place_name);\n        mAddressAutoCompleteTextView.setText(place_name);\n        placeNameBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), mAddressAutoCompleteTextView.getText().toString());\n        defaultMarker();\n\n    }\n    public static String trimDoubbleQuote(String value){\n        return value.replaceAll(\"^\\\"|\\\"$\", \"\");\n    }\n    public static String trimSingleQuote(String value){\n        return value.replaceAll(\"^\\'|\\'$\", \"\");\n    }\n\n    @Override\n    public void onMapReady(GoogleMap googleMap) {\n\n    }\n\n    public class mSingleCheckBoxChangeListener implements CheckBox.OnCheckedChangeListener {\n        @Override\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            int backgroundColorGrey = ContextCompat.getColor(getContext(), R.color.quantum_grey);\n            int backgroundColorGreen = ContextCompat.getColor(getContext(), R.color.green);\n            boolean checkBoxValue;\n            editor=preferences.edit();\n            if (buttonView == monday) {\n                if (isChecked) {\n                    availabilityDays.add(\"monday\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"monday\", checkBoxValue);\n                    editor.apply();\n                } else {\n                    availabilityDays.remove(\"monday\");\n                     checkBoxValue =false;\n                    editor.putBoolean(\"monday\", checkBoxValue);\n                    editor.commit();\n\n                }\n            }\n\n            if (buttonView == tuesday) {\n                if (isChecked) {\n                    availabilityDays.add(\"tuesday\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"tuesday\", checkBoxValue);\n                    editor.apply();\n                } else {\n                    availabilityDays.remove(\"tuesday\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"tuesday\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n\n            if (buttonView == wednesday) {\n                if (isChecked) {\n                    availabilityDays.add(\"wednesday\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"wednesday\", checkBoxValue);\n                    editor.apply();\n                } else {\n                    availabilityDays.remove(\"wednesday\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"wednesday\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n\n            if (buttonView == thursday) {\n                if (isChecked) {\n                    availabilityDays.add(\"thursday\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"thursday\", checkBoxValue);\n                    editor.apply();\n                } else {\n                    availabilityDays.remove(\"thursday\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"thursday\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n\n            if (buttonView == friday) {\n                if (isChecked) {\n                    availabilityDays.add(\"friday\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"friday\", checkBoxValue);\n                    editor.apply();\n                } else {\n                    availabilityDays.remove(\"friday\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"friday\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n\n            if (buttonView == satursday) {\n                if (isChecked) {\n                    availabilityDays.add(\"saturday\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"satursday\", checkBoxValue);\n                    editor.apply();\n                } else {\n                    availabilityDays.remove(\"saturday\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"saturday\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n\n            if (buttonView == sunday) {\n                if (isChecked) {\n                    availabilityDays.add(\"sunday\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"sunday\", checkBoxValue);\n                    editor.apply();\n                } else {\n                    availabilityDays.remove(\"sunday\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"sunday\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n            if (buttonView==morningTime)\n            {\n                if (isChecked){\n                    timeSlotArray.add(\"8:00-11:00\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"morning\", checkBoxValue);\n                    editor.apply();\n                }\n                else {\n                    timeSlotArray.remove(\"8:00-11:00\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"morning\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n            if (buttonView==middayTime)\n            {\n                if (isChecked){\n                    timeSlotArray.add(\"11:00-15:00\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"midday\", checkBoxValue);\n                    editor.apply();\n                }\n                else {\n                    timeSlotArray.remove(\"11:00-15:00\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"midday\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n            if (buttonView==afternoonTime)\n            {\n                if (isChecked){\n                    timeSlotArray.add(\"15:00-18:00\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"afternoon\", checkBoxValue);\n                    editor.apply();\n                }\n                else {\n                    timeSlotArray.remove(\"15:00-18:00\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"afternoon\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n            if (buttonView==eveningTime)\n            {\n                if (isChecked){\n                    timeSlotArray.add(\"18:00-21:00\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"evening\", checkBoxValue);\n                    editor.apply();\n                }\n                else {\n                    timeSlotArray.remove(\"18:00-21:00\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"evening\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n            if (buttonView==nightTime)\n            {\n                if (isChecked){\n                    timeSlotArray.add(\"21:00-8:00\");\n                    checkBoxValue=true;\n                    editor.putBoolean(\"overnight\", checkBoxValue);\n                    editor.apply();\n                }\n                else {\n                    timeSlotArray.remove(\"21:00=8:00\");\n                    checkBoxValue=false;\n                    editor.putBoolean(\"overnight\", checkBoxValue);\n                    editor.apply();\n                }\n            }\n        }\n    }\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/elshare/map_frag.java	(revision 02f810162c4d71e37807e3e10702522305e8dd2a)
+++ app/src/main/java/com/example/elshare/map_frag.java	(date 1608522796441)
@@ -1,6 +1,5 @@
 package com.example.elshare;
 
-import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.app.ProgressDialog;
@@ -10,37 +9,28 @@
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
-import android.graphics.PorterDuff;
-import android.graphics.Typeface;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
-import android.text.SpannableString;
-import android.util.DisplayMetrics;
+import android.text.TextUtils;
 import android.util.Log;
-import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.Window;
-import android.view.WindowManager;
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
 import android.widget.AutoCompleteTextView;
 import android.widget.Button;
 import android.widget.CheckBox;
 import android.widget.CompoundButton;
-import android.widget.EditText;
 import android.widget.ImageButton;
 import android.widget.LinearLayout;
 import android.widget.ListView;
-import android.widget.SeekBar;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import androidx.annotation.DrawableRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
@@ -50,6 +40,7 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
+import com.example.elshare.adapter.AvailabilityTimeSlotAdapter;
 import com.example.elshare.adapter.ChargerTypeAdapter;
 import com.example.elshare.adapter.GooglePlacesAutocompleteAdapter;
 import com.example.elshare.adapter.SocketTypeAdapter;
@@ -66,18 +57,17 @@
 import com.google.android.material.bottomsheet.BottomSheetDialog;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
-import com.google.maps.android.clustering.ClusterManager;
 import com.mohammedalaa.seekbar.DoubleValueSeekBarView;
 import com.mohammedalaa.seekbar.OnDoubleValueSeekBarChangeListener;
-import com.mohammedalaa.seekbar.OnRangeSeekBarChangeListener;
-import com.mohammedalaa.seekbar.RangeSeekBarView;
 import com.yahoo.mobile.client.android.util.rangeseekbar.RangeSeekBar;
 
 import java.io.StringWriter;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
 import java.util.List;
-import java.util.Objects;
+import java.util.Set;
 
 import datamodel.APIInterface;
 import datamodel.Connector_type;
@@ -85,8 +75,6 @@
 import datamodel.ShowAvailabilityPojo;
 import datamodel.ShowAvailabilityProvider;
 import datamodel.Socket;
-import datamodel.Socket_public;
-import de.hdodenhof.circleimageview.CircleImageView;
 import okhttp3.MediaType;
 import okhttp3.RequestBody;
 import retrofit2.Call;
@@ -109,6 +97,11 @@
      Boolean priceVisible;
     Dialog viewDetailDialog;
 
+    RecyclerView recyclerView;
+    AvailabilityTimeSlotAdapter adapter;
+    RecyclerView.LayoutManager layoutManager;
+    ArrayList<String> time_array = new ArrayList<>();
+    ArrayList<String> day_array = new ArrayList<>();
 
     RangeSeekBar seekBar;
     RequestBody priceStartBody;
@@ -146,6 +139,7 @@
     SocketTypeAdapter socketTypeAdapter;
     ChargerTypeAdapter chargerTypeAdapter;
     SupportMapFragment mapFragment;
+    Set set = new HashSet();
 
     CheckBox monday;
     CheckBox tuesday;
@@ -178,22 +172,10 @@
         mAddressAutoCompleteTextView.setAdapter(mGooglePlacesAutocompleteAdapter);
         mAddressAutoCompleteTextView.setOnItemClickListener(this);
          seekBar = new RangeSeekBar<Integer>(getContext());
-         viewDetailDialog=new Dialog(getContext());
-
-        show_list=rootView.findViewById(R.id.button123);
-        show_list.setOnClickListener(new View.OnClickListener() {
-            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
-            @Override
-            public void onClick(View v) {
-
-            }
-        });
 
         mapFragment= (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);
         initialMarkers();
 
-
-
         mapFilter.setOnClickListener(new View.OnClickListener() {
             @RequiresApi(api = Build.VERSION_CODES.KITKAT)
             @Override
@@ -207,7 +189,6 @@
                 final TextView maxText;
                 Button mapFilterSortByPrice;
                 final LinearLayout priceLayout;
-
                 pw=new Dialog(v.getRootView().getContext(), R.style.PauseDialog);
                 pw.getWindow().setBackgroundDrawable(new ColorDrawable(Color.WHITE));
                 pw.setTitle("Map Filter");
@@ -536,7 +517,7 @@
                                             mMap.setOnInfoWindowClickListener(new GoogleMap.OnInfoWindowClickListener() {
                                                 @Override
                                                 public void onInfoWindowClick(Marker marker) {
-                                                    showAlertDialog(marker.getTitle());
+                                                    showAlertDialog(marker.getTitle(),marker.getSnippet());
                                                 }
                                             });
 
@@ -578,8 +559,8 @@
                                                                                     chargerTypeText = mapMarkerView.findViewById(R.id.charger_type);
                                                                                     chargerTypeText.bringToFront();
 
-                                                                                    if (providerObject.getConnectorType()!=null) {
-                                                                                        connetorText.setText(providerObject.getConnectorType());
+                                                                                    if (providerObject.getPowerOutput()!=null) {
+                                                                                        connetorText.setText(providerObject.getPowerOutput());
                                                                                     }
                                                                                     else {
                                                                                         connetorText.setText("null");
@@ -724,7 +705,7 @@
                                         mMap.setOnInfoWindowClickListener(new GoogleMap.OnInfoWindowClickListener() {
                                             @Override
                                             public void onInfoWindowClick(Marker marker) {
-                                                showAlertDialog(marker.getTitle());
+                                                showAlertDialog(marker.getTitle(),marker.getSnippet());
                                             }
                                         });
 
@@ -831,17 +812,206 @@
             }
         });
     }
-    private void showAlertDialog(String i)
+    private void showAlertDialog(String hostId,String  hostTable)
     {
 
-        viewDetailDialog=new Dialog(getActivity(),R.style.PauseDialog);
-        myDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.WHITE));
-        viewDetailDialog.setTitle("Map Detail");
+        String hostStr=hostTable;
+        hostStr=trimSingleQuote(hostStr);
+        String title_str=hostStr +" "+"charger";
+        Log.i("Table name:",title_str);
+        viewDetailDialog=new Dialog(getContext(),R.style.DialogAlignment);
         viewDetailDialog.setContentView(R.layout.pricing_reservation_pop_up);
+        recyclerView=viewDetailDialog.findViewById(R.id.availabilityTimeSlotRecycleView);
+
+        TextView pop_up_title=viewDetailDialog.findViewById(R.id.mapMarkerTitle);
+        if (hostStr.equals("publics"))
+        {
+            pop_up_title.setText("Public Charger");
+        }
+        else   if (hostStr.equals("residentials"))
+        {
+            pop_up_title.setText("Residential Charger");
+        }
+        else   if (hostStr.equals("commercials"))
+        {
+            pop_up_title.setText("Commercial Charger");
+        }
+
+        final TextView socket_type=viewDetailDialog.findViewById(R.id.mapMarkerPopUpSocket);
+        final TextView charger_type=viewDetailDialog.findViewById(R.id.mapMarkerPopUpCharger);
+        final TextView power_output=viewDetailDialog.findViewById(R.id.mapMarkerPopUpPower);
+        final TextView model_type=viewDetailDialog.findViewById(R.id.mapMarkerPopUpModel);
+        final TextView connector_type=viewDetailDialog.findViewById(R.id.mapMarkerPopUpConnctor);
+        final TextView rate_text=viewDetailDialog.findViewById(R.id.mapMarkerPopUpRate);
+        final TextView availableDay=viewDetailDialog.findViewById(R.id.mapMarkerPopUpAvailableDay);
+        final LinearLayout socketLayout=viewDetailDialog.findViewById(R.id.socketTypeLayout);
+        final LinearLayout chargerLayout=viewDetailDialog.findViewById(R.id.chargerTypeLayout);
+        Button pricingAndReservationButton=viewDetailDialog.findViewById(R.id.mapMarkerPopUpPricingButton);
+
+        final ProgressDialog mProgressDialog = new ProgressDialog(getContext());
+        mProgressDialog.setIndeterminate(true);
+        mProgressDialog.setMessage("Loading...");
+        mProgressDialog.show();
+        day_array.clear();
+        time_array.clear();
+
+        APIInterface service = SingletonRetrofit.getAPIInterface();
+        Call<ShowAvailabilityPojo> call = service.getAvailability(hostId,hostStr);
+        Log.i("Connector_api  : ", String.valueOf(call.request().url()));
+        call.enqueue(new Callback<ShowAvailabilityPojo>() {
+                         @Override
+                         public void onResponse(Call<ShowAvailabilityPojo> call, Response<ShowAvailabilityPojo> response) {
+                             if (response.body() != null) {
+                                 ShowAvailabilityPojo availabilityPojo = response.body();
+                                 if (availabilityPojo!=null) {
+                                     Log.i("days:",availabilityPojo.getProvider().getDays());
+                                     availableDay.setText(availabilityPojo.getProvider().getDays());
+                                     power_output.setText(availabilityPojo.getProvider().getPowerOutput());
+                                     rate_text.setText(availabilityPojo.getProvider().getFinalPrice());
+
+
+                                     if (availabilityPojo.getProvider().getChargerBrand()!=null) {
+                                         if (availabilityPojo.getProvider().getSocket()!=null) {
+                                             socket_type.setText(availabilityPojo.getProvider().getSocket());
+                                             power_output.setText(availabilityPojo.getProvider().getPowerOutput());
+                                             chargerLayout.setVisibility(View.GONE);
+                                             socketLayout.setVisibility(View.VISIBLE);
+                                             mProgressDialog.dismiss();
+                                         }
+                                         else
+                                         {
+                                             socket_type.setText("null");
+                                         }
+                                     }
+                                     else
+                                     {
+                                      socketLayout.setVisibility(View.GONE);
+                                      chargerLayout.setVisibility(View.VISIBLE);
+                                      if (availabilityPojo.getProvider().getChargerBrand()!=null) {
+                                          charger_type.setText(availabilityPojo.getProvider().getChargerBrand());
+                                          model_type.setText(availabilityPojo.getProvider().getChargerModel());
+                                          connector_type.setText(availabilityPojo.getProvider().getConnectorType());
+                                          mProgressDialog.dismiss();
+                                      }
+                                      else
+                                      {
+                                          charger_type.setText("null");
+                                      }
+                                     }
+
+                                     String selected_days=availabilityPojo.getProvider().getDays();
+                                     String single_day_string=availabilityPojo.getSingleDay();
+                                     Log.i("Connector_api",single_day_string);
+
+                                     if (single_day_string.equals("0"))
+                                     {
+                                         StringBuilder stringBuilder = new StringBuilder("");
+                                         int listSize = availabilityPojo.getStartTime().size();
+                                         for (int itemIndex = 0; itemIndex < availabilityPojo.getStartTime().size(); itemIndex++) {
+                                             String startTime = availabilityPojo.getStartTime().get(itemIndex);
+                                             String endTime = availabilityPojo.getEndTime().get(itemIndex);
+                                             stringBuilder.append(startTime + "-" + endTime);
+                                             if (itemIndex < listSize - 1) {
+                                                 stringBuilder.append(", ");
+                                             }
+                                         }
+                                         if (selected_days.contains("monday")) {
+                                             time_array.add(stringBuilder.toString());
+                                             day_array.add("Monday");
+                                         }
+                                         if (selected_days.contains("tuesday")) {
+                                             time_array.add(stringBuilder.toString());
+                                             day_array.add("Tuesday");
+                                         }
+                                         if (selected_days.contains("wednesday")) {
+                                             time_array.add(stringBuilder.toString());
+                                             day_array.add("Wednesday");
+                                         }
+                                         if (selected_days.contains("thursday")) {
+                                             time_array.add(stringBuilder.toString());
+                                             day_array.add("Thursday");
+                                         }
+                                         if (selected_days.contains("friday")) {
+                                             time_array.add(stringBuilder.toString());
+                                             day_array.add("Friday");
+                                         }
+                                         if (selected_days.contains("saturday")) {
+                                             time_array.add(stringBuilder.toString());
+                                             day_array.add("Satursday");
+                                         }
+                                         if (selected_days.contains("sunday")) {
+                                             time_array.add(stringBuilder.toString());
+                                             day_array.add("Sunday");
+                                         }
+                                     }
+                                     else
+                                     {
+                                         if (selected_days.contains("monday")) {
+                                             String selectedTimeValue = getSelectedTimeForDay(availabilityPojo.getStartTimeMon(), availabilityPojo.getEndTimeMon());
+                                             time_array.add(selectedTimeValue);
+                                             day_array.add("Monday");
+                                         }
+                                         if (selected_days.contains("tuesday")) {
+                                             String selectedTimeValue = getSelectedTimeForDay(availabilityPojo.getStartTimeTues(), availabilityPojo.getEndTimeTues());
+                                             time_array.add(selectedTimeValue);
+                                             day_array.add("Tuesday");
+                                         }
+                                         if (selected_days.contains("wednesday")) {
+                                             String selectedTimeValue = getSelectedTimeForDay(availabilityPojo.getStartTimeWed(), availabilityPojo.getEndTimeWed());
+                                             time_array.add(selectedTimeValue);
+                                             day_array.add("Wednesday");
+                                         }
+                                         if (selected_days.contains("thursday")) {
+                                             String selectedTimeValue = getSelectedTimeForDay(availabilityPojo.getStartTimeThus(), availabilityPojo.getEndTimeThus());
+                                             time_array.add(selectedTimeValue);
+                                             day_array.add("Thursday");
+                                         }
+                                         if (selected_days.contains("friday")) {
+                                             String selectedTimeValue = getSelectedTimeForDay(availabilityPojo.getStartTimeFri(), availabilityPojo.getEndTimeFri());
+                                             time_array.add(selectedTimeValue);
+                                             day_array.add("friday");
+
+                                         }
+                                         if (selected_days.contains("saturday")) {
+                                             String selectedTimeValue = getSelectedTimeForDay(availabilityPojo.getStartTimeSat(), availabilityPojo.getEndTimeSat());
+                                             time_array.add(selectedTimeValue);
+                                             day_array.add("saturday");
+
+                                         }
+                                         if (selected_days.contains("sunday")) {
+                                             String selectedTimeValue = getSelectedTimeForDay(availabilityPojo.getStartTimeSun(), availabilityPojo.getEndTimeSun());
+                                             time_array.add(selectedTimeValue);
+                                             day_array.add("Sunday");
+
+                                         }
+                                     }
+                                     Log.i("Provider", availabilityPojo.getProvider().getDays());
+                                 }
+                                 if (day_array.size()==0) {
+                                     Toast.makeText(getContext(), "No Availability of host.", Toast.LENGTH_SHORT).show();
+                                 }
+                                 else
+                                 {
+                                     recyclerView.setHasFixedSize(true);
+                                     layoutManager = new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL, false);
+                                     recyclerView.setLayoutManager(layoutManager);
+                                     adapter = new AvailabilityTimeSlotAdapter(getContext(), day_array, time_array);
+                                     recyclerView.setAdapter(adapter);
+                                 }
+
+                             }
+                             else {
+
+                             }
+                         }
+            @Override
+            public void onFailure(Call<ShowAvailabilityPojo> call, Throwable t) {
+                Log.i("Error", String.valueOf(t.getMessage()));
+                Toast.makeText(getContext(), "Internal server error.", Toast.LENGTH_SHORT).show();
+            }
+        });
+
         viewDetailDialog.show();
-
-
-
     }
 
 
@@ -1072,7 +1242,19 @@
             }
         }
     }
-
+    public String getSelectedTimeForDay(List<String> startTimeList, List<String> endTimeList) {
+        StringBuilder stringBuilder = new StringBuilder("");
+        int listSize = startTimeList.size();
+        for (int itemIndex = 0; itemIndex < listSize; itemIndex++) {
+            String startTime = startTimeList.get(itemIndex);
+            String endTime = endTimeList.get(itemIndex);
+            stringBuilder.append(startTime + "-" + endTime);
+            if (itemIndex < listSize - 1) {
+                stringBuilder.append(", ");
+            }
+        }
+        return stringBuilder.toString();
+    }
 
 
 }
